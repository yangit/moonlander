#include QMK_KEYBOARD_H
#include "version.h"
#include "debug.h"
// #include "keymap_german.h"
// #include "keymap_nordic.h"
// #include "keymap_french.h"
// #include "keymap_spanish.h"
// #include "keymap_hungarian.h"
// #include "keymap_swedish.h"
// #include "keymap_br_abnt2.h"
// #include "keymap_canadian_multilingual.h"
// #include "keymap_german_ch.h"
// #include "keymap_jp.h"
// #include "keymap_bepo.h"
// #include "keymap_italian.h"
// #include "keymap_slovenian.h"
// #include "keymap_danish.h"
// #include "keymap_norwegian.h"
// #include "keymap_portuguese.h"
// #include "keymap_contributions.h"
// #include "keymap_czech.h"
// #include "keymap_romanian.h"
// #include "keymap_russian.h"
// #include "keymap_uk.h"
// #include "keymap_estonian.h"



// 
#define MODS_SHIFT_MASK (MOD_BIT(KC_LSHIFT) | MOD_BIT(KC_RSHIFT))
bool is_smart_rus = false;
bool is_smart_rus_disable_counter = 0;

void smart_rus_toggle(keyrecord_t *record)
{
  if (record->event.pressed)
  {
    // press
    if (is_smart_rus)
    {
      is_smart_rus_disable_counter++;
      if (is_smart_rus_disable_counter == 1)
      {
        SEND_STRING(SS_LCMD(SS_LALT(SS_TAP(X_SPC))));
      }
    }
  }
  else
  {
    // release
    if (is_smart_rus)
    {
      if (is_smart_rus_disable_counter == 1)
      {
        SEND_STRING(SS_LCMD(SS_LALT(SS_TAP(X_SPC))));
      }
      is_smart_rus_disable_counter--;
    }
  }
}

bool process_record_user(uint16_t keycode, keyrecord_t *record)
{
  if (record->event.pressed)
  {
    xprintf("c%02d,r%02d\n", record->event.key.col, record->event.key.row);
  }
  switch (keycode)
  {
  case RGB_SLD:
    if (record->event.pressed)
    {
      rgblight_mode(1);
    }
    return false;
  case KC_BSPACE:
    if (record->event.pressed)
    {
      if (get_mods() & MODS_SHIFT_MASK)
      {
        register_code(KC_DEL);
      }
      else
      {
        register_code(KC_BSPACE);
      }
    }
    else
    {
      unregister_code(KC_DEL);
      unregister_code(KC_BSPACE);
    }
    return false;
  case KC_LANG9: // QWERTY
    if (record->event.pressed)
    {
      // press
      if (is_smart_rus)
      {
        SEND_STRING(SS_LCMD(SS_LALT(SS_TAP(X_SPC))));
      }
      is_smart_rus = false;
      layer_off(1);
      layer_on(12);
    }
    else
    {
      // release
    }
    return false; // Skip all further processing of this key
  case KC_LANG7: // English
    if (record->event.pressed)
    {
      // press
      if (is_smart_rus)
      {
        SEND_STRING(SS_LCMD(SS_LALT(SS_TAP(X_SPC))));
      }
      is_smart_rus = false;
      layer_off(1);
      layer_off(12);
    }
    else
    {
      // release
    }
    return false; // Skip all further processing of this key
  case KC_LANG8: // Russian
    if (record->event.pressed)
    {
      // press
      if (!is_smart_rus)
      {
        SEND_STRING(SS_LCMD(SS_LALT(SS_TAP(X_SPC))));
      }
      is_smart_rus = true;
      layer_on(1);
      layer_off(12);
    }
    else
    {
      // release
    }
    return false; // Skip all further processing of this key
  case MO(2):
    smart_rus_toggle(record);
    return true;
  case MO(3):
    smart_rus_toggle(record);
    return true;
  case MO(4):
    smart_rus_toggle(record);
    return true;
  case MO(7):
    smart_rus_toggle(record);
    return true;
  }
  return true;
}